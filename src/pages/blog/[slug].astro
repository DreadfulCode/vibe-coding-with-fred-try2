---
import Layout from '../../layouts/Layout.astro';
import CodeBlock from '../../components/CodeBlock.astro';
import ImageGallery from '../../components/ImageGallery.astro';
import { format } from 'date-fns';

// In a real implementation, we would fetch these from a CMS or content collection
const posts = [
  {
    title: "Getting Started with Modern React Patterns",
    slug: "getting-started-with-modern-react-patterns",
    pubDate: new Date('2025-04-10'),
    description: "Learn the latest React patterns and best practices for building scalable applications in 2025.",
    image: "https://images.pexels.com/photos/11035471/pexels-photo-11035471.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=2",
    tags: ["react", "javascript", "frontend"],
    featured: true,
    content: `
## Introduction

React has evolved significantly over the years, and keeping up with modern patterns is essential for building maintainable and efficient applications. In this post, we'll explore some of the most useful patterns in React development for 2025.

### Why Modern Patterns Matter

Using the right patterns can:

- Reduce code duplication
- Improve performance
- Make components more reusable
- Simplify testing and maintenance

## Compound Components

Compound components are a pattern where components are used together such that they share an implicit state that lets them communicate with each other in the background.

### Example of Compound Components

Let's create a simple Tab component:

\`\`\`jsx
// Tab.jsx
import React, { createContext, useState, useContext } from 'react';

const TabContext = createContext();

export function Tabs({ children, defaultTab }) {
  const [activeTab, setActiveTab] = useState(defaultTab);
  
  return (
    <TabContext.Provider value={{ activeTab, setActiveTab }}>
      <div className="tabs-container">
        {children}
      </div>
    </TabContext.Provider>
  );
}

export function TabList({ children }) {
  return <div className="tab-list">{children}</div>;
}

export function Tab({ children, value }) {
  const { activeTab, setActiveTab } = useContext(TabContext);
  
  return (
    <button 
      className={\`tab \${activeTab === value ? 'active' : ''}\`}
      onClick={() => setActiveTab(value)}
    >
      {children}
    </button>
  );
}

export function TabPanels({ children }) {
  return <div className="tab-panels">{children}</div>;
}

export function TabPanel({ children, value }) {
  const { activeTab } = useContext(TabContext);
  
  return activeTab === value ? <div className="tab-panel">{children}</div> : null;
}
\`\`\`

Now you can use these components together:

\`\`\`jsx
import { Tabs, TabList, Tab, TabPanels, TabPanel } from './Tab';

function MyTabs() {
  return (
    <Tabs defaultTab="tab1">
      <TabList>
        <Tab value="tab1">First Tab</Tab>
        <Tab value="tab2">Second Tab</Tab>
        <Tab value="tab3">Third Tab</Tab>
      </TabList>
      
      <TabPanels>
        <TabPanel value="tab1">
          <h2>First Tab Content</h2>
          <p>This is the content for the first tab.</p>
        </TabPanel>
        <TabPanel value="tab2">
          <h2>Second Tab Content</h2>
          <p>Content for the second tab goes here.</p>
        </TabPanel>
        <TabPanel value="tab3">
          <h2>Third Tab Content</h2>
          <p>And here's the content for the third tab.</p>
        </TabPanel>
      </TabPanels>
    </Tabs>
  );
}
\`\`\`

## Custom Hooks for Logic Reuse

Custom hooks are one of the most powerful features in React. They allow you to extract component logic into reusable functions.

### Example: useLocalStorage Hook

\`\`\`javascript
function useLocalStorage(key, initialValue) {
  // State to store our value
  const [storedValue, setStoredValue] = useState(() => {
    if (typeof window === "undefined") {
      return initialValue;
    }
    
    try {
      // Get from local storage by key
      const item = window.localStorage.getItem(key);
      // Parse stored json or if none return initialValue
      return item ? JSON.parse(item) : initialValue;
    } catch (error) {
      console.error(error);
      return initialValue;
    }
  });
  
  // Return a wrapped version of useState's setter function that
  // persists the new value to localStorage
  const setValue = (value) => {
    try {
      // Allow value to be a function so we have same API as useState
      const valueToStore =
        value instanceof Function ? value(storedValue) : value;
      
      // Save state
      setStoredValue(valueToStore);
      
      // Save to local storage
      if (typeof window !== "undefined") {
        window.localStorage.setItem(key, JSON.stringify(valueToStore));
      }
    } catch (error) {
      console.error(error);
    }
  };
  
  return [storedValue, setValue];
}
\`\`\`

## Server Components and React Server Actions

React Server Components are a game-changer for data fetching and rendering. They allow components to run on the server, reducing bundle sizes and improving performance.

### Example of Using Server Components

\`\`\`jsx
// This is a Server Component
async function ProductDetails({ id }) {
  const product = await fetchProduct(id);
  
  return (
    <div>
      <h1>{product.name}</h1>
      <p>{product.description}</p>
      <p>${product.price}</p>
      
      {/* Client Component with interactivity */}
      <AddToCartButton product={product} />
    </div>
  );
}

// This is marked as a Client Component
'use client'
function AddToCartButton({ product }) {
  const [isAdded, setIsAdded] = useState(false);
  
  const handleClick = () => {
    addToCart(product);
    setIsAdded(true);
    setTimeout(() => setIsAdded(false), 2000);
  };
  
  return (
    <button 
      onClick={handleClick} 
      className={\`add-to-cart \${isAdded ? 'added' : ''}\`}
    >
      {isAdded ? 'Added to Cart!' : 'Add to Cart'}
    </button>
  );
}
\`\`\`

## Conclusion

Modern React patterns help us build more maintainable, performant, and developer-friendly applications. By leveraging patterns like compound components, custom hooks, and server components, we can create better user experiences while keeping our code clean and reusable.

Stay tuned for more in-depth explorations of these patterns in future posts!
    `
  },
  {
    title: "Building a Full-Stack App with Astro and Supabase",
    slug: "building-fullstack-app-with-astro-supabase",
    pubDate: new Date('2025-04-01'),
    description: "A step-by-step guide to creating a full-stack application using Astro and Supabase.",
    image: "https://images.pexels.com/photos/4974914/pexels-photo-4974914.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=2",
    tags: ["astro", "supabase", "fullstack"],
    featured: true,
    content: `
## Introduction to Astro and Supabase

In this tutorial, we'll build a full-stack blog application using Astro for the frontend and Supabase for the backend. This combination provides a powerful and efficient way to create modern web applications with minimal JavaScript.

### What We'll Build

We'll create a blog with the following features:
- User authentication
- CRUD operations for blog posts
- Image uploads
- Comments system
- Tag filtering

### Screenshots of the Final Product

Here's what our finished application will look like:

The blog post list view with filtering by tags:

The single post view with comments:

## Setting Up the Project

First, let's create a new Astro project and integrate Supabase.

\`\`\`bash
# Create a new Astro project
npm create astro@latest my-blog-app
cd my-blog-app

# Add Supabase integration
npm install @supabase/supabase-js
\`\`\`

### Configuring Supabase

Create a new Supabase project at [https://supabase.com](https://supabase.com) and get your project URL and anon key.

Create a .env file in your project root:

\`\`\`
PUBLIC_SUPABASE_URL=your-project-url
PUBLIC_SUPABASE_ANON_KEY=your-anon-key
\`\`\`

### Creating a Supabase Client

Create a file at src/lib/supabase.js:

\`\`\`javascript
import { createClient } from '@supabase/supabase-js';

const supabaseUrl = import.meta.env.PUBLIC_SUPABASE_URL;
const supabaseAnonKey = import.meta.env.PUBLIC_SUPABASE_ANON_KEY;

export const supabase = createClient(supabaseUrl, supabaseAnonKey);
\`\`\`

## Setting Up the Database

Let's create the necessary tables in Supabase. Go to the SQL Editor in your Supabase dashboard and run the following SQL:

\`\`\`sql
-- Create posts table
CREATE TABLE posts (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  title TEXT NOT NULL,
  content TEXT NOT NULL,
  image_url TEXT,
  author_id UUID REFERENCES auth.users(id) NOT NULL,
  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- Create tags table
CREATE TABLE tags (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  name TEXT UNIQUE NOT NULL
);

-- Create post_tags junction table
CREATE TABLE post_tags (
  post_id UUID REFERENCES posts(id) ON DELETE CASCADE,
  tag_id UUID REFERENCES tags(id) ON DELETE CASCADE,
  PRIMARY KEY (post_id, tag_id)
);

-- Create comments table
CREATE TABLE comments (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  content TEXT NOT NULL,
  post_id UUID REFERENCES posts(id) ON DELETE CASCADE,
  author_id UUID REFERENCES auth.users(id),
  created_at TIMESTAMPTZ DEFAULT NOW()
);

-- Set up RLS (Row Level Security)
ALTER TABLE posts ENABLE ROW LEVEL SECURITY;
ALTER TABLE tags ENABLE ROW LEVEL SECURITY;
ALTER TABLE post_tags ENABLE ROW LEVEL SECURITY;
ALTER TABLE comments ENABLE ROW LEVEL SECURITY;

-- Create policies
CREATE POLICY "Anyone can read posts" 
  ON posts FOR SELECT USING (true);

CREATE POLICY "Authors can create posts" 
  ON posts FOR INSERT WITH CHECK (auth.uid() = author_id);

CREATE POLICY "Authors can update their posts" 
  ON posts FOR UPDATE USING (auth.uid() = author_id);

CREATE POLICY "Authors can delete their posts" 
  ON posts FOR DELETE USING (auth.uid() = author_id);

-- Similar policies for other tables...
\`\`\`

## Building the Frontend

Now let's create the frontend components. We'll start with the authentication system.

### Authentication Components

Create a SignIn component at src/components/SignIn.astro:

\`\`\`jsx
---
import { supabase } from '../lib/supabase.js';
---

<div class="auth-form">
  <h2>Sign In</h2>
  <form id="signInForm">
    <div class="form-group">
      <label for="email">Email</label>
      <input type="email" id="email" required />
    </div>
    <div class="form-group">
      <label for="password">Password</label>
      <input type="password" id="password" required />
    </div>
    <button type="submit">Sign In</button>
    <p id="authError" class="error-message"></p>
  </form>
  <p>Don't have an account? <a href="/signup">Sign Up</a></p>
</div>

<script>
  import { supabase } from '../lib/supabase.js';
  
  const form = document.getElementById('signInForm');
  const errorEl = document.getElementById('authError');
  
  form.addEventListener('submit', async (e) => {
    e.preventDefault();
    
    const email = document.getElementById('email').value;
    const password = document.getElementById('password').value;
    
    const { data, error } = await supabase.auth.signInWithPassword({
      email,
      password
    });
    
    if (error) {
      errorEl.textContent = error.message;
    } else {
      window.location.href = '/';
    }
  });
</script>
\`\`\`

## Building the Blog Features

Now let's create the main components for our blog.

### Post List Component

Create a PostList component at src/components/PostList.astro:

\`\`\`jsx
---
import { supabase } from '../lib/supabase.js';

const { data: posts, error } = await supabase
  .from('posts')
  .select(\`
    id, 
    title, 
    content, 
    image_url, 
    created_at,
    author:author_id(email),
    tags:post_tags(tag:tag_id(name))
  \`)
  .order('created_at', { ascending: false });

if (error) {
  console.error(error);
}
---

<div class="posts-container">
  {posts && posts.map((post) => (
    <article class="post-card">
      {post.image_url && (
        <img src={post.image_url} alt={post.title} class="post-image" />
      )}
      <div class="post-content">
        <h2><a href={\`/posts/\${post.id}\`}>{post.title}</a></h2>
        <div class="post-meta">
          <span>By {post.author?.email}</span>
          <span>{new Date(post.created_at).toLocaleDateString()}</span>
        </div>
        <p>{post.content.substring(0, 150)}...</p>
        <div class="post-tags">
          {post.tags.map((tagObj) => (
            <a href={\`/tags/\${tagObj.tag.name}\`} class="tag">
              {tagObj.tag.name}
            </a>
          ))}
        </div>
      </div>
    </article>
  ))}
</div>
\`\`\`

### Single Post Component

Create a SinglePost component at src/components/SinglePost.astro:

\`\`\`jsx
---
import { supabase } from '../lib/supabase.js';
import CommentForm from './CommentForm.astro';
import CommentList from './CommentList.astro';

const { id } = Astro.params;

const { data: post, error } = await supabase
  .from('posts')
  .select(\`
    id, 
    title, 
    content, 
    image_url, 
    created_at,
    author:author_id(email),
    tags:post_tags(tag:tag_id(name))
  \`)
  .eq('id', id)
  .single();

if (error) {
  console.error(error);
}
---

{post ? (
  <article class="single-post">
    <h1>{post.title}</h1>
    <div class="post-meta">
      <span>By {post.author?.email}</span>
      <span>{new Date(post.created_at).toLocaleDateString()}</span>
    </div>
    
    {post.image_url && (
      <img src={post.image_url} alt={post.title} class="post-image-large" />
    )}
    
    <div class="post-content">
      {post.content.split('\n').map((paragraph) => (
        <p>{paragraph}</p>
      ))}
    </div>
    
    <div class="post-tags">
      {post.tags.map((tagObj) => (
        <a href={\`/tags/\${tagObj.tag.name}\`} class="tag">
          {tagObj.tag.name}
        </a>
      ))}
    </div>
    
    <div class="comments-section">
      <h2>Comments</h2>
      <CommentList postId={post.id} />
      <CommentForm postId={post.id} />
    </div>
  </article>
) : (
  <div class="error-message">Post not found</div>
)}
\`\`\`

## Conclusion

In this tutorial, we've built a full-stack blog application using Astro and Supabase. This is just the beginning - you can extend this application with features like:

- User profiles
- Advanced search functionality
- Post categories
- Social sharing
- Analytics

Astro's islands architecture paired with Supabase's backend services provides an efficient and scalable approach to modern web development.

In the next part of this series, we'll add advanced features like real-time updates and file uploads. Stay tuned!
    `
  }
];

export function getStaticPaths() {
  return [
    { params: { slug: 'getting-started-with-modern-react-patterns' } },
    { params: { slug: 'building-fullstack-app-with-astro-supabase' } }
  ];
}

const { slug } = Astro.params;
const post = posts.find(post => post.slug === slug);

if (!post) {
  return Astro.redirect('/404');
}

const formattedDate = format(new Date(post.pubDate), 'MMMM dd, yyyy');

// Mock data for image gallery
const sampleImages = [
  {
    url: "https://images.pexels.com/photos/270348/pexels-photo-270348.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=2",
    alt: "Code on a screen",
    caption: "Modern JavaScript code example"
  },
  {
    url: "https://images.pexels.com/photos/1181675/pexels-photo-1181675.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=2",
    alt: "Laptop with code",
    caption: "Working with TypeScript in VS Code"
  }
];

// Mock data for related posts
const relatedPosts = posts.filter(p => p.slug !== slug);

// Parse markdown content to extract code blocks
// This is a simplified version - in a real app you'd use a proper markdown parser
function extractCodeBlocks(content) {
  const codeBlockRegex = /```(\w+)?\n([\s\S]*?)```/g;
  const codeBlocks = [];
  let match;
  
  while ((match = codeBlockRegex.exec(content)) !== null) {
    codeBlocks.push({
      language: match[1] || 'text',
      code: match[2]
    });
  }
  
  return codeBlocks;
}

const codeBlocks = extractCodeBlocks(post.content);

// Replace markdown code blocks with placeholders for our CodeBlock component
let processedContent = post.content;
codeBlocks.forEach((block, index) => {
  processedContent = processedContent.replace(
    `\`\`\`${block.language}\n${block.code}\`\`\``,
    `<!-- CODE_BLOCK_${index} -->`
  );
});

// Convert markdown to HTML (simplified)
function markdownToHTML(md) {
  // Headers
  md = md.replace(/## (.*?)$/gm, '<h2>$1</h2>');
  md = md.replace(/### (.*?)$/gm, '<h3>$1</h3>');
  
  // Bold
  md = md.replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>');
  
  // Italic
  md = md.replace(/\*(.*?)\*/g, '<em>$1</em>');
  
  // Links
  md = md.replace(/\[(.*?)\]\((.*?)\)/g, '<a href="$2">$1</a>');
  
  // Lists
  md = md.replace(/^\- (.*?)$/gm, '<li>$1</li>');
  md = md.replace(/(<li>.*?<\/li>\n)+/g, '<ul>$&</ul>');
  
  // Paragraphs (simple)
  md = md.replace(/^(?!<[a-z]).+$/gm, '<p>$&</p>');
  
  return md;
}

let htmlContent = markdownToHTML(processedContent);

// Re-insert code blocks
codeBlocks.forEach((block, index) => {
  const placeholder = `<!-- CODE_BLOCK_${index} -->`;
  htmlContent = htmlContent.replace(placeholder, `<astro-code-block index="${index}"></astro-code-block>`);
});
---

<Layout title={post.title} description={post.description} image={post.image}>
  <article class="bg-white dark:bg-gray-900">
    <!-- Hero section with post header -->
    <div class="relative">
      <!-- Featured image -->
      <div class="w-full h-96 overflow-hidden">
        <img 
          src={post.image} 
          alt={post.title}
          class="w-full h-full object-cover"
        />
        <!-- Gradient overlay -->
        <div class="absolute inset-0 bg-gradient-to-t from-black/75 to-transparent"></div>
      </div>
      
      <!-- Post header content -->
      <div class="absolute bottom-0 left-0 right-0 p-6 sm:p-10 text-white">
        <div class="container mx-auto max-w-4xl">
          <!-- Tags -->
          <div class="flex flex-wrap gap-2 mb-4">
            {post.tags.map(tag => (
              <a 
                href={`/tags/${tag}`}
                class="text-xs font-medium px-2 py-1 rounded-full bg-primary-500/90 text-white hover:bg-primary-600/90 transition-colors"
              >
                #{tag}
              </a>
            ))}
          </div>
          
          <!-- Title -->
          <h1 class="text-3xl sm:text-4xl md:text-5xl font-bold mb-4 text-white">{post.title}</h1>
          
          <!-- Meta info -->
          <div class="flex flex-wrap items-center gap-x-6 gap-y-2 text-sm text-gray-200">
            <div class="flex items-center">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
              </svg>
              <time datetime={post.pubDate.toISOString()}>{formattedDate}</time>
            </div>
            <div class="flex items-center">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
              </svg>
              <span>By Fred</span>
            </div>
            <div class="flex items-center">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>
              <span>8 min read</span>
            </div>
          </div>
        </div>
      </div>
    </div>
    
    <!-- Post content -->
    <div class="container mx-auto max-w-4xl px-4 sm:px-6 py-12">
      <div class="prose prose-lg dark:prose-invert max-w-none">
        <Fragment set:html={htmlContent} />
      </div>
      
      <!-- Image gallery example -->
      <div class="my-8">
        <h3 class="text-xl font-bold mb-4 text-gray-900 dark:text-white">Screenshots</h3>
        <ImageGallery images={sampleImages} />
      </div>
      
      <!-- Author section -->
      <div class="border-t border-b border-gray-200 dark:border-gray-700 py-8 my-8">
        <div class="flex items-center">
          <img 
            src="https://images.pexels.com/photos/1681010/pexels-photo-1681010.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=2" 
            alt="Fred" 
            class="w-16 h-16 rounded-full mr-4 object-cover"
          />
          <div>
            <h3 class="font-bold text-lg text-gray-900 dark:text-white">Fred</h3>
            <p class="text-gray-600 dark:text-gray-400 text-sm">Senior Web Developer passionate about modern frontend technologies and clean code. Follow me for more tutorials and insights on web development.</p>
          </div>
        </div>
      </div>
      
      <!-- Share section -->
      <div class="flex flex-wrap gap-4 mb-12">
        <span class="font-medium text-gray-900 dark:text-white">Share this post:</span>
        <a href="#" class="text-gray-600 dark:text-gray-400 hover:text-primary-600 dark:hover:text-primary-400">
          <svg class="h-5 w-5" fill="currentColor" viewBox="0 0 24 24" aria-hidden="true">
            <path d="M8.29 20.251c7.547 0 11.675-6.253 11.675-11.675 0-.178 0-.355-.012-.53A8.348 8.348 0 0022 5.92a8.19 8.19 0 01-2.357.646 4.118 4.118 0 001.804-2.27 8.224 8.224 0 01-2.605.996 4.107 4.107 0 00-6.993 3.743 11.65 11.65 0 01-8.457-4.287 4.106 4.106 0 001.27 5.477A4.072 4.072 0 012.8 9.713v.052a4.105 4.105 0 003.292 4.022 4.095 4.095 0 01-1.853.07 4.108 4.108 0 003.834 2.85A8.233 8.233 0 012 18.407a11.616 11.616 0 006.29 1.84"></path>
          </svg>
        </a>
        <a href="#" class="text-gray-600 dark:text-gray-400 hover:text-primary-600 dark:hover:text-primary-400">
          <svg class="h-5 w-5" fill="currentColor" viewBox="0 0 24 24" aria-hidden="true">
            <path fill-rule="evenodd" d="M12.315 2c2.43 0 2.784.013 3.808.06 1.064.049 1.791.218 2.427.465a4.902 4.902 0 011.772 1.153 4.902 4.902 0 011.153 1.772c.247.636.416 1.363.465 2.427.048 1.067.06 1.407.06 4.123v.08c0 2.643-.012 2.987-.06 4.043-.049 1.064-.218 1.791-.465 2.427a4.902 4.902 0 01-1.153 1.772 4.902 4.902 0 01-1.772 1.153c-.636.247-1.363.416-2.427.465-1.067.048-1.407.06-4.123.06h-.08c-2.643 0-2.987-.012-4.043-.06-1.064-.049-1.791-.218-2.427-.465a4.902 4.902 0 01-1.772-1.153 4.902 4.902 0 01-1.153-1.772c-.247-.636-.416-1.363-.465-2.427-.047-1.024-.06-1.379-.06-3.808v-.63c0-2.43.013-2.784.06-3.808.049-1.064.218-1.791.465-2.427a4.902 4.902 0 011.153-1.772A4.902 4.902 0 015.45 2.525c.636-.247 1.363-.416 2.427-.465C8.901 2.013 9.256 2 11.685 2h.63zm-.081 1.802h-.468c-2.456 0-2.784.011-3.807.058-.975.045-1.504.207-1.857.344-.467.182-.8.398-1.15.748-.35.35-.566.683-.748 1.15-.137.353-.3.882-.344 1.857-.047 1.023-.058 1.351-.058 3.807v.468c0 2.456.011 2.784.058 3.807.045.975.207 1.504.344 1.857.182.466.399.8.748 1.15.35.35.683.566 1.15.748.353.137.882.3 1.857.344 1.054.048 1.37.058 4.041.058h.08c2.597 0 2.917-.01 3.96-.058.976-.045 1.505-.207 1.858-.344.466-.182.8-.398 1.15-.748.35-.35.566-.683.748-1.15.137-.353.3-.882.344-1.857.048-1.055.058-1.37.058-4.041v-.08c0-2.597-.01-2.917-.058-3.96-.045-.976-.207-1.505-.344-1.858a3.097 3.097 0 00-.748-1.15 3.098 3.098 0 00-1.15-.748c-.353-.137-.882-.3-1.857-.344-1.023-.047-1.351-.058-3.807-.058zM12 6.865a5.135 5.135 0 110 10.27 5.135 5.135 0 010-10.27zm0 1.802a3.333 3.333 0 100 6.666 3.333 3.333 0 000-6.666zm5.338-3.205a1.2 1.2 0 110 2.4 1.2 1.2 0 010-2.4z" clip-rule="evenodd"></path>
          </svg>
        </a>
        <a href="#" class="text-gray-600 dark:text-gray-400 hover:text-primary-600 dark:hover:text-primary-400">
          <svg class="h-5 w-5" fill="currentColor" viewBox="0 0 24 24" aria-hidden="true">
            <path d="M19 0h-14c-2.761 0-5 2.239-5 5v14c0 2.761 2.239 5 5 5h14c2.762 0 5-2.239 5-5v-14c0-2.761-2.238-5-5-5zm-11 19h-3v-11h3v11zm-1.5-12.268c-.966 0-1.75-.79-1.75-1.764s.784-1.764 1.75-1.764 1.75.79 1.75 1.764-.783 1.764-1.75 1.764zm13.5 12.268h-3v-5.604c0-3.368-4-3.113-4 0v5.604h-3v-11h3v1.765c1.396-2.586 7-2.777 7 2.476v6.759z"></path>
          </svg>
        </a>
      </div>
      
      <!-- Related posts -->
      <div class="my-12">
        <h3 class="text-2xl font-bold mb-6 text-gray-900 dark:text-white">You might also like</h3>
        <div class="grid grid-cols-1 md:grid-cols-2 gap-8">
          {relatedPosts.slice(0, 2).map(relatedPost => (
            <a href={`/blog/${relatedPost.slug}`} class="group">
              <div class="bg-gray-50 dark:bg-gray-800 overflow-hidden rounded-lg shadow-sm border border-gray-100 dark:border-gray-700 transition-all duration-300 group-hover:shadow-md">
                <div class="relative pb-[56.25%] overflow-hidden">
                  <img 
                    src={relatedPost.image} 
                    alt={relatedPost.title} 
                    class="absolute inset-0 w-full h-full object-cover transition-transform duration-500 ease-in-out group-hover:scale-105"
                    loading="lazy"
                  />
                </div>
                <div class="p-6">
                  <h4 class="text-lg font-bold mb-2 text-gray-900 dark:text-white group-hover:text-primary-600 dark:group-hover:text-primary-400">
                    {relatedPost.title}
                  </h4>
                  <p class="text-gray-600 dark:text-gray-300 text-sm line-clamp-2">
                    {relatedPost.description}
                  </p>
                </div>
              </div>
            </a>
          ))}
        </div>
      </div>
    </div>
  </article>
</Layout>

<!-- Inject code blocks where needed -->
<script define:vars={{ codeBlocks }}>
  document.addEventListener('DOMContentLoaded', () => {
    document.querySelectorAll('astro-code-block').forEach(placeholder => {
      const index = parseInt(placeholder.getAttribute('index'));
      const block = codeBlocks[index];
      
      if (block) {
        // Create code block elements manually
        const codeBlock = document.createElement('div');
        codeBlock.className = 'code-block relative rounded-lg overflow-hidden mb-6';
        
        const pre = document.createElement('pre');
        pre.className = `language-${block.language}`;
        
        const code = document.createElement('code');
        code.className = `language-${block.language}`;
        code.textContent = block.code.trim();
        
        pre.appendChild(code);
        codeBlock.appendChild(pre);
        
        // Add copy button
        const copyBtn = document.createElement('button');
        copyBtn.className = 'copy-button';
        copyBtn.setAttribute('aria-label', 'Copy code to clipboard');
        copyBtn.textContent = 'Copy';
        
        copyBtn.addEventListener('click', () => {
          navigator.clipboard.writeText(block.code.trim())
            .then(() => {
              copyBtn.textContent = 'Copied!';
              setTimeout(() => {
                copyBtn.textContent = 'Copy';
              }, 2000);
            })
            .catch(err => {
              console.error('Failed to copy text: ', err);
              copyBtn.textContent = 'Failed!';
              setTimeout(() => {
                copyBtn.textContent = 'Copy';
              }, 2000);
            });
        });
        
        codeBlock.appendChild(copyBtn);
        
        // Add run button for JavaScript
        if (block.language === 'javascript' || block.language === 'js' || block.language === 'jsx') {
          const runBtn = document.createElement('button');
          runBtn.className = 'run-button';
          runBtn.setAttribute('aria-label', 'Run this code');
          runBtn.textContent = 'Run it!';
          
          const outputDiv = document.createElement('div');
          outputDiv.className = 'code-output hidden mt-2 p-4 bg-gray-100 dark:bg-gray-800 rounded-md border border-gray-200 dark:border-gray-700';
          
          const outputTitle = document.createElement('div');
          outputTitle.className = 'output-title text-sm font-medium mb-2 text-gray-700 dark:text-gray-300';
          outputTitle.textContent = 'Output:';
          
          const outputContent = document.createElement('div');
          outputContent.className = 'output-content';
          
          outputDiv.appendChild(outputTitle);
          outputDiv.appendChild(outputContent);
          
          runBtn.addEventListener('click', () => {
            // Show the output block
            outputDiv.classList.remove('hidden');
            
            // Create a safe execution environment
            try {
              // Capture console logs
              const logs = [];
              const originalConsoleLog = console.log;
              console.log = (...args) => {
                logs.push(args.map(arg => 
                  typeof arg === 'object' ? JSON.stringify(arg, null, 2) : String(arg)
                ).join(' '));
                originalConsoleLog(...args);
              };
              
              // Execute the code
              const result = new Function(block.code)();
              
              // Restore console.log
              console.log = originalConsoleLog;
              
              // Display the output
              if (logs.length > 0) {
                outputContent.innerHTML = logs.map(log => `<div class="mb-1">${log}</div>`).join('');
              } else if (result !== undefined) {
                outputContent.textContent = typeof result === 'object' 
                  ? JSON.stringify(result, null, 2) 
                  : String(result);
              } else {
                outputContent.textContent = 'Code executed successfully with no output.';
              }
            } catch (error) {
              outputContent.innerHTML = `<div class="text-red-500">Error: ${error.message}</div>`;
            }
          });
          
          codeBlock.appendChild(runBtn);
          codeBlock.appendChild(outputDiv);
        }
        
        // Replace the placeholder with the code block
        placeholder.replaceWith(codeBlock);
      }
    });
  });
</script>